package com.hotct.xml;

import java.io.IOException;
import java.nio.ByteBuffer;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/**
 * 更新消息的操作类
 * 方法parseXML :解析消息
 * 方法createDocument :生成消息
 * @author liujh
 */
public class UpdateMsg
{

	/**
	 * 返回结果数组，包含两个值：
	 * result[0]: 文件名(更新程序的文件名) 终端由此文件名判断是UI更新，还是终端程序更新（UI.jar , Terminal.jar）
	 * result[1]: 存有文件内容的ByteBuffer
	 * result[2]: 需要更新程序的终端id
	 */
	private Object[] result = new Object[3];
	
	
	public static void main(String[] args) throws Exception
	{
//		FileChannel fc = new FileInputStream(new File("d:\\liuxing.txt")).getChannel();
//		ByteBuffer buffer = ByteBuffer.allocate(new Long(fc.size()).intValue());	
//		fc.read(buffer);
		ByteBuffer buffer = ByteBuffer.allocate(0);
//		buffer.flip();
//		fc.close();
		UpdateMsg dm = new UpdateMsg();
		String message = dm.createDocument("ui.txt", buffer,"id1,id2,id3");
		System.out.println(message);
		
		Object[] rst = dm.parseXML(message);
		
//		fc = new FileOutputStream("d:\\"+rst[0]).getChannel();
//		fc.write((ByteBuffer)rst[1]);
//		fc.close();
		
		System.out.println(rst[2]);
	}
	/**
	 * 解析消息
	 */
	public Object[] parseXML(String xml)
	{
		Document doc=null;
		try
		{
			doc = DocumentHelper.parseText(xml);
		} catch (DocumentException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		Element root = doc.getRootElement(); 
		Element file = root.element("File");
		String fileName = file.elementText("name");
		String buf = file.elementText("torrentBuffer");
		ByteBuffer buffer = null;
		if(buf!= null)
		{
			BASE64Decoder decoder = new BASE64Decoder();  
			try
			{
				byte[] text_ = decoder.decodeBuffer(buf);
				buffer = ByteBuffer.wrap(text_);
			} catch (IOException e)
			{
			}
			
		}
		String ids = root.elementText("clientIds");
		
		//设置返回值
		result[0] = fileName;
		result[1] = buffer;
		result[2] = ids;
		
		return result;
	}
	/**
	 * 生成更新消息
	 * @param fileName ：要下载种子文件名 UI或Terminal
	 * @param buffer ：存有种子文件内容的buffer
	 * @return 返回更新消息
	 */
	public String createDocument(String fileName,ByteBuffer buffer,String ids)
	{
		String message = "";
		//生成消息字符串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("Name");
		root.addAttribute("msgname","Update");
		Element file = root.addElement("File");
		Element name = file.addElement("name");
		Element torrentBuffer = file.addElement("torrentBuffer");
		name.addText(fileName);
		byte[] commons = buffer.array();
		String torrent = "";
		if(commons != null && commons.length!=0)
		{
			BASE64Encoder encoder = new BASE64Encoder(); 
		    torrent = encoder.encode(commons);
		}
		torrentBuffer.addText(torrent);
		buffer = null;
		
		Element clientIds = root.addElement("clientIds");
		clientIds.addText(ids);
		
		//将document 转化成xml格式字符串
		message = document.asXML();
		
		return message;
	}
}
